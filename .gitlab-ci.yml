default:
  image: python:latest

variables:
  DOCKER_HUB_TAG: tournament
  LOCAL_IMAGE: bot
  DOCKER_DRIVER: overlay2
  LINUX_USER: ubuntu


stages:         
  - test
  - build
  - scanning
  - deploy

unit_tests:   
  stage: test
  before_script:
    - cd bot
  script:
    - pip install pytest
    - pytest   

code_style:   
  stage: test
  before_script:
    - pip install pycodestyle    
  script:
    - pycodestyle ./bot
  allow_failure: true

build:
  stage: build
  image: docker:latest
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - name: docker:dind
  script:
    - cd ./bot
    - docker build -t $CI_REGISTRY_USER/$DOCKER_HUB_TAG .
    - docker push $CI_REGISTRY_IMAGE:latest

container_scanning:
  stage: scanning
  image: docker:latest
  services:
  - name: docker:dind
  before_script:
    - docker pull aquasec/trivy
  script:
    - docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $CI_REGISTRY_IMAGE:latest

deploy:
  image: alpine:latest
  stage: deploy 
  environment: production
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk upgrade && apk add openssh-client )'
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_KEY"
    - ssh-add "$SSH_KEY"
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  script:
    - echo "Deploy to production"
    - ssh -i $SSH_KEY -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "export TOKEN=$TELEGRAM_TOKEN"
    - ssh -i $SSH_KEY -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker pull $CI_REGISTRY_IMAGE:latest"
    - ssh -i $SSH_KEY -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker compose stop server"
    - ssh -i $SSH_KEY -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker compose up -d --no-deps server"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
