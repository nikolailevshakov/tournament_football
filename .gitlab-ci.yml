default:
  image: python:latest

variables:
  DOCKER_HUB_TAG: tournament
  LOCAL_IMAGE: bot
  DOCKER_DRIVER: overlay2
  LINUX_USER: ubuntu
  PLAN: plan.cache
  PLAN_JSON: plan.json
  TF_ROOT: infra

stages:
  - infra
  - test
  - build
  - scanning
  - deploy
  - notify

.terraform_init:
  - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - cd $TF_ROOT
  - terraform --version
  - terraform init

plan:
  stage: infra
  image: hashicorp/terraform
  before_script:
    - apk --no-cache add jq
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    - terraform_init
  script:
    - terraform plan -out=$PLAN
    - terraform show --json $PLAN | convert_report
  artifacts:
    reports:
      terraform: $PLAN_JSON

update:
  stage: infra
  image: hashicorp/terraform
  before_script:
    - terraform_init
  script:
    - terraform apply -input=false
  when: manual


recreate:
  stage: infra
  image: hashicorp/terraform
  before_script:
    - terraform_init
  script:
    - terraform destroy -input=false
    - terraform apply -input=false
  when: manual

unit_tests:   
  stage: test
  before_script:
    - cd bot
  script:
    - pip install pytest
    - pytest   

code_style:
  stage: test
  before_script:
    - pip install pycodestyle    
  script:
    - pycodestyle ./bot
  allow_failure: true

build:
  stage: build
  image: docker:latest
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - name: docker:dind
  script:
    - cd ./bot
    - docker build -t $CI_REGISTRY_USER/$DOCKER_HUB_TAG .
    - docker push $CI_REGISTRY_IMAGE:latest

container_scanning:
  stage: scanning
  image: docker:latest
  services:
  - name: docker:dind
  before_script:
    - docker pull aquasec/trivy
  script:
    - docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $CI_REGISTRY_IMAGE:latest

deploy:
  image: alpine:latest
  stage: deploy 
  environment: production
  before_script:
    - apk upgrade && apk add openssh-client curl
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_KEY"
    - ssh-add "$SSH_KEY"
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  script:
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker rmi -f $CI_REGISTRY_USER/$DOCKER_HUB_TAG"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "cd bot;git pull https://${GIT_USERNAME}:${GIT_PASSWORD}@gitlab.com/sample9832632/bot.git"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker pull $CI_REGISTRY_IMAGE:latest"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "echo TELEGRAM_TOKEN=${TELEGRAM_TOKEN} > bot/bot/.env"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "echo OPENAI_API_KEY=${OPENAI_API_KEY} >> bot/bot/.env"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker compose -f bot/bot/docker-compose.yaml pull"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker compose -f bot/bot/docker-compose.yaml up -d"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

notify_error:
  image: alpine:latest
  stage: notify
  script:
    - apk add curl
    - sh ./bot/scripts/notify.sh "Failed ❌"
  when: on_failure

notify_success:
  image: alpine:latest
  stage: notify
  script:
    - apk add curl
    - sh ./bot/scripts/notify.sh "Success ✅"
  when: on_success