default:
  image: python:latest

variables:
  DOCKER_HUB_TAG: tournament
  LOCAL_IMAGE: bot
  DOCKER_DRIVER: overlay2
  LINUX_USER: ubuntu
  TEXT: "Deploy status: $STATUS%0A%0AProject:+$CI_PROJECT_NAME%0AURL:+$CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID/%0ABranch:+$CI_COMMIT_REF_SLUG%0AUser:+$GITLAB_USER_NAME"


stages:         
  - test
  - build
  - scanning
  - deploy
  - notify

.notify_status: &notify_status
  - apk add curl
  - curl -s --max-time 10
    -d "chat_id=$CHAT_ID&disable_web_page_preview=1&text=$TEXT"
    https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage > /dev/nul

unit_tests:   
  stage: test
  before_script:
    - cd bot
  script:
    - pip install pytest
    - pytest   

code_style:   
  stage: test
  before_script:
    - pip install pycodestyle    
  script:
    - pycodestyle ./bot
  allow_failure: true

build:
  stage: build
  image: docker:latest
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - name: docker:dind
  script:
    - cd ./bot
    - docker build -t $CI_REGISTRY_USER/$DOCKER_HUB_TAG .
    - docker push $CI_REGISTRY_IMAGE:latest

container_scanning:
  stage: scanning
  image: docker:latest
  services:
  - name: docker:dind
  before_script:
    - docker pull aquasec/trivy
  script:
    - docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $CI_REGISTRY_IMAGE:latest

deploy:
  image: alpine:latest
  stage: deploy 
  environment: production
  before_script:
    - apk upgrade && apk add openssh-client
    - eval $(ssh-agent -s)
    - chmod 400 "$SSH_KEY"
    - ssh-add "$SSH_KEY"
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  variables:
    STATUS: "✅"
  script:
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "cd bot; git pull https://${GIT_USERNAME}:${GIT_PASSWORD}@gitlab.com/sample9832632/bot.git"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker pull $CI_REGISTRY_IMAGE:latest"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "echo TELEGRAM_TOKEN=${TELEGRAM_TOKEN} > bot/bot/.env"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker compose -f bot/bot/docker-compose.yaml pull"
    - ssh -o StrictHostKeyChecking=no $LINUX_USER@$SERVER_IP "sudo docker compose -f bot/bot/docker-compose.yaml up -d server"
  after_script:
    - *notify_status
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

notify_error:
  stage: notify
  variables:
    STATUS: "❌"
  script:
    - *notify_status
  when: on_failure